Model subclass: #Counter	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'MVC-Tutorial'!!Counter methodsFor: 'instance creation' stamp: 'WR 9/18/2024 19:49'!new" Answer an initialized instance of the receiver"^super new initialize " return a new instance"! !!Counter methodsFor: 'operations' stamp: 'WR 9/18/2024 19:48'!decrement" subtract 1 from the value of the counter "self value: value - 1.! !!Counter methodsFor: 'operations' stamp: 'WR 9/18/2024 19:48'!increment" add 1 to the value of the counter "self value: value + 1.! !!Counter methodsFor: 'initialize-release' stamp: 'WR 9/18/2024 19:48'!initialize" Set the initial value to 0."self value: 0.! !!Counter methodsFor: 'accessing' stamp: 'WR 9/18/2024 19:47'!value" Answer the current value of the receiver"^value! !!Counter methodsFor: 'accessing' stamp: 'WR 9/18/2024 19:47'!value: aNumber" Initialize the counter to value aNumber"value := aNumber.self changed. " to update displayed value "! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Counter class	instanceVariableNames: ''!!Counter class methodsFor: 'initialize-release' stamp: 'WR 9/18/2024 19:43'!initialize" Set the initial value to 0."self value: 0.! !Object subclass: #CounterController	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MVC-Tutorial'!!CounterController methodsFor: 'pluggable menus' stamp: 'WR 9/18/2024 20:09'!getPluggableYellowButtonMenu: shiftKeyState^ nil! !!CounterController methodsFor: 'menu messages' stamp: 'WR 9/18/2024 20:08'!decrement" subtract 1 from the value of the counter "self model decrement! !!CounterController methodsFor: 'menu messages' stamp: 'WR 9/18/2024 20:09'!increment" add 1 to the value of the counter "self model increment! !!CounterController methodsFor: 'initialize-release' stamp: 'WR 9/18/2024 20:08'!initialize"initialize a menu of commands for changing the value of the model"super initialize.self redButtonMenu:(PopUpMenu labels: 'increment\decrement' withCRs)redButtonMessages: #(increment decrement)" here we use the red button menu "! !!CounterController methodsFor: 'control defaults' stamp: 'WR 9/18/2024 20:08'!isControlActive^super isControlActive & super blueButtonPressed not! !Object subclass: #CounterView	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MVC-Tutorial'!!CounterView methodsFor: 'instance creation' stamp: 'WR 9/18/2024 20:11'!open" open a view for a new counter"" select and execute this comment to test this method:""CounterView open"| aCounterView topView |aCounterView := CounterView newmodel: Counter new.aCounterView borderWidth: 2.aCounterView insideColor: Color white.topView := StandardSystemView newlabel: 'Counter'.topView minimumSize: 80 @ 40;maximumSize: 120 @ 100.topView addSubView: aCounterView.topView controller open! !!CounterView methodsFor: 'instance creation' stamp: 'WR 9/18/2024 20:12'!openWithGraphicalButtons" open a view for a new counter"" select and execute this comment to test this method:""CounterView openWithGraphicalButtons"| aCounterView topView incrButton decrButtonincrSwitchView decrSwitchView dt textStyle |aCounterView := CounterView newmodel: Counter new.aCounterView borderWidthLeft: 1 right: 2 top: 2 bottom: 2.aCounterView insideColor: Color white.topView := ColorSystemView newlabel: 'Counter'.topView minimumSize: 100 @ 40;maximumSize: 260 @ 220.incrButton := Button newOff.incrButton onAction: [aCounterView model increment].incrSwitchView := PluggableButtonView on: incrButtongetState: #isOnaction: #turnOn.textStyle := (TextStyle named: 'NewYork') copy.dt := ('+' asText addAttribute: TextFontChange font4) allBold asDisplayText.dt foregroundColor: Color blackbackgroundColor: Color lightGreen.dt textStyle: textStyle.incrSwitchView label: dt.incrSwitchView borderWidthLeft: 2 right: 1 top: 2 bottom: 1;insideColor: Color lightGreen.incrSwitchView window: (0 @ 0 extent: 40 @ 50).topView addSubView: incrSwitchView toLeftOf: aCounterView.decrButton := Button newOff.decrButton onAction: [aCounterView model decrement].decrSwitchView := PluggableButtonView on: decrButtongetState: #isOnaction: #turnOn.dt := ('-' asText addAttribute: TextFontChange font4) allBold asDisplayText.dt foregroundColor: Color blackbackgroundColor: Color lightRed.decrSwitchView label: dt.decrSwitchView borderWidthLeft: 2 right: 1 top: 1 bottom: 2;insideColor: Color lightRed.decrSwitchView window: (0 @ 0 extent: 40 @ 50).aCounterView window: (0 @ 0 extent: 60@100).topView addSubView: decrSwitchView below: incrSwitchView.topView addSubView: aCounterView toRightOf: incrSwitchView.topView controller open! !!CounterView methodsFor: 'updating' stamp: 'WR 9/18/2024 20:11'!update: aParameter"simply redisplay everything"self display.! !!CounterView methodsFor: 'displaying' stamp: 'WR 9/18/2024 20:11'!displayView| box pos displayText |box := self insetDisplayBox.pos := box origin + (4 @ ((box extent y / 3) rounded)).displayText := ('value: ', self model value printString) asDisplayText.displayText foregroundColor: Color blackbackgroundColor: Color white.displayText displayAt: pos.! !!CounterView methodsFor: 'controller access' stamp: 'WR 9/18/2024 20:11'!defaultControllerClass" answer the class of a typically useful controller"^CounterController.! !Counter initialize!